[2025-08-30] Status and Plan

Completed (current repo state)
- printf integrated in backend: single consolidated call arm; auto-declares `declare i32 @printf(ptr, ...)`; passes format and pointer args as `ptr`, integers as `i32`.
- Ternary (?:) lowered via branches with join block (alloca/store/br/load) to satisfy cond tests.
- Cleanup: removed duplicated fragments in emit_expr; fixed casts and brace mismatches.
- Test suites green:
  - Backend IR tests all pass, including new printf vararg-typing test.
  - Driver runtime tests added for printf: basic, multiple args, hex (%x/%X), unsigned (%u), pointer (%p), and mixed formats — all pass via wyrmcc run pipeline.

Next Work
1) Expand printf coverage (tests only; functionality relies on system libc):
   - Add driver tests covering common flags/width/precision:
     - Zero pad width: printf("%05d\n", 7) -> 00007
     - Left-justify: printf("%-6dX\n", 7) -> "7     X"
     - Plus sign for positives: printf("%+d\n", 7) -> +7
     - Space flag: printf(" %d\n", 7) ->  7
     - Alternate form for hex: printf("%#x %#X\n", 255, 255) -> 0xff 0XFF
     - Precision on strings: printf("%.3s\n", "hello") -> hel
     - Literal percent: printf("%%\n") -> %
   - Keep tests in crates/driver/tests using the existing harness (assert_cmd, predicates). No backend changes expected.

2) Next feature (compiler/backend): pointer subtraction (ptr - ptr)
   - Semantics (C89 subset): When both operands are pointers to the same element type (initially support int), result is (difference in elements) in i32 (ptrdiff_t surrogate). For now, limit to pointers to int; future work can generalize via sizeof(element).
   - Backend lowering sketch:
     - Compute ptrtoint for both pointers to i64, subtract, divide by element size (4 for int) to produce i32.
     - Ensure unsigned/overflow behavior is not UB for well-formed inputs (same array/object).
   - Tests to add:
     - Backend IR test: confirm `ptrtoint`, `sub`, `sdiv 4` (or arithmetic sequence producing i32 result) are present.
     - Driver runtime test: create two pointers into the same int array and return (p2 - p1); expect correct element count.

Execution Checklist
- [ ] Add driver tests for printf flags/width/precision listed above; run `cargo test -p wyrmcc`.
- [ ] Add backend IR + driver runtime tests for pointer subtraction; run `cargo test -p backend` and `cargo test -p wyrmcc`.
- [ ] Implement ptr - ptr lowering in backend if tests require it; re-run suites until green.

Notes
- printf coverage expansion leverages libc; no compiler changes unless arg typing issues surface (current scheme: ints=i32, pointers=ptr).
- Pointer subtraction: start with pointers to int only; extend later as type system matures.

[2025-08-30] Progress Update

Summary (since last update):
- Backend
  - Cleaned and consolidated Expr::Call with puts/printf/generic handling.
  - Integrated printf: declare i32 @printf(ptr, ...); typed args (ptr for format/pointers, i32 for ints).
  - Implemented ternary (?:) via branch-and-join (alloca result, br i1 then/else, join load).
  - Implemented pointer subtraction (ptr - ptr) -> element difference using ptrtoint and divide by element size.
  - Function-scope static locals implemented (internal globals @__static_<fn>_<name>), including pointer initializers from string/null.
  - Global emission/linkage: deduplication and priority (definition > tentative > extern).
  - All backend tests green (printf IR, cond lowering, ptr-sub, arrays, structs/unions, loops, switch, variadics, etc.).
- Sema
  - TU-level linkage checks in place: extern decl-only allowed; extern with initializer errors; multiple tentatives allowed; duplicate definitions are errors. Tests pass.
- Driver
  - Added and validated runtime tests for printf (wyrmcc): mixed ints/pointers/hex/unsigned/pointers. All pass end-to-end with system toolchain.

Next Focus (toward full C89): Phase 2.1 – Function Prototypes and Call Checking
- Goal: Enforce prototype signatures, arity/type checks (including variadics), and apply usual arithmetic conversions at call sites.
- Plan:
  1) Extend sema function symbol table: parameter types, variadic flag, and prototype vs definition tracking.
  2) At call sites, check:
     - Too few/many args -> diagnostic.
     - Type mismatch in fixed params -> diagnostic.
     - Variadic calls: fixed param checks; allow extra args with default argument promotions.
  3) Apply integer promotions/usual arithmetic conversions for arguments as needed (staged coverage).
- Tests to add now (sema):
  - Too few args, too many args.
  - Type mismatch (e.g., int expected, ptr given).
  - Variadic: fixed part checked; extras permitted; mismatch in fixed part rejected.
  - Smoke compile remains unchanged in backend.

Notes toward full C89 roadmap
- Upcoming: 2.2 Typedef resolution across scopes; 1.x integer model + promotions breadth; 3.x aggregate initializers; 4.x function pointers/indirect calls; 6.x minimal CPP integration via driver.

[2025-08-30] Sema Prototype/Call Checking
- Implemented function signatures (incl. built-ins puts, printf); enforced arity and fixed-arg type checks with array-to-pointer decay; variadics accepted after fixed part.
- Added sema tests (too few/many args, fixed-arg type mismatch, variadic behavior, built-ins); all passing.
- Backend remains green (printf integrated, ternary via branches, ptr - ptr subtraction).
Next: Phase 2.2 – Typedef resolution across scopes (tests first, then implementation).

[2025-08-30] Sync And Tests Status
- Workspace fully green after fixing Sema::from_tu call.
- Parser: added support for typedef array declarators (e.g., `typedef int A[10];`) and for parsing declarations that use unknown typedef-names (e.g., `T x;`) so sema can emit proper diagnostics.
- Sema: prototypes/call checking (arity, type checks, variadics), typedef resolution across scopes, and labels/goto checks are implemented; tests pass.
- Driver printf coverage: the flags/width/precision tests already exist and pass (see `crates/driver/tests/run_printf_flags.rs`), along with hex/pointer/mixed/unsigned tests.

Checklist status
- [x] Expand printf coverage (flags/width/precision) — done; see `run_printf_flags.rs`.
- [x] Pointer subtraction — implemented; tests pass.

Next Focus Options
1) Function pointers and indirect calls: add parsing for function pointer declarators (AST type support), sema typing for calls via pointers, backend lowering for indirect calls; tests (sema + driver).
2) Aggregate initializers (minimal): support simple brace initializers for arrays/structs in parser/sema; backend emission for zero-inits and simple lists; tests.
3) Broaden integer promotions/usual arithmetic conversions tests: extend coverage matrices across signed/unsigned and widths; sema-only tests plus a few runtime checks.

Awaiting selection; ready to proceed.

[2025-08-30] Roadmap And Master Checklist (Full C89 Focus)

Status Snapshot
- Workspace green (parse, lex, sema, backend, driver, pp tests passing).
- Sema: prototypes/call checking (arity, fixed-arg types, variadics), typedef resolution, labels/goto checks — implemented.
- Backend: printf integrated, ternary via branch-and-join, pointer subtraction, static locals, global linkage — implemented and tested.
- Driver: runtime tests for printf (incl. flags/width/precision) and others — passing.

Time Estimates (with Eve’s automation)
- MVP (usable C89 subset; no full PP, floats, bit-fields): 3–6 days
- Full C89-focused baseline (solid PP, diagnostics, ABI): 2–4 weeks
- Near-term sequencing:
  1) Function pointers end-to-end (parser declarators + backend indirect calls + tests): 0.5–1 day
  2) Declarator grammar generalization (parenthesized + abstract declarators; ptr/array/func combos): 2–4 days
  3) Aggregate initialization + struct/union assignment + by-value ABI: 4–7 days
  4) UAC completeness (integers) across operators: 1–2 days
  5) Preprocessor macros/conditionals/includes: 5–8 days
  6) Floating point (lexer/types/sema/backend): 2–4 days
  7) Bit-fields: 5–8 days
  8) Sema diagnostics completeness (incomplete types, qualifiers, composite type rules): 2–4 days
  9) Driver/CLI polish (-E/-S/-c/-o, -I/-D/-U, multi-input, link): 1–2 days

Master Checklist (C89-Oriented)
Legend: [x]=done [ ]=todo [~]=partial/in-progress

A. Lexing/Parsing
- [x] Integer literals (dec/hex/oct) and char/string literals
- [x] Core tokens: keywords, punctuators, identifiers
- [x] Declarations: basic types, pointers, arrays
- [~] Declarator grammar completeness
  - [ ] Parenthesized declarators (e.g., int (*p)[10], int (*fp)(int))
  - [ ] Abstract declarators (casts, parameter types without names)
  - [ ] Arrays of pointers, pointers to arrays; reject arrays of functions
  - [ ] Qualifiers on pointers/types (const/volatile) parsed
  - [ ] Storage classes everywhere (static/extern/register/typedef) parsed
- [x] Function definitions and prototypes (prototype style)
- [ ] K&R (old-style) function definitions (optional; decide policy)
- [x] Struct/union and enum syntax with inline definitions
- [x] Typedef declarations (including arrays)

B. Preprocessor (pp)
- [~] Includes and search paths
  - [~] #include "..." and <...> basic behavior
  - [ ] -I handling; full system search order
- [ ] Macros
  - [ ] Object-like and function-like macros
  - [ ] Arguments substitution, recursion guard
  - [ ] Stringize (#) and paste (##)
  - [ ] Undef (#undef), redefinition rules
- [ ] Conditionals
  - [ ] #if/#elif/#else/#endif with const-expr evaluator (incl. defined operator)
  - [ ] #ifdef/#ifndef
  - [ ] #error, #line (passthrough), #pragma passthrough
- [ ] Integration with driver (-E), and with parser/sema pipeline

C. Semantics (Sema)
- [x] Prototypes and call checking (arity, fixed-arg types)
- [x] Variadics: fixed part checks; extra args accepted
- [~] Function pointers
  - [x] Expr::CallPtr typing
  - [ ] Function designators decay to pointer at use sites
  - [ ] Type compatibility between function types
- [x] Typedef resolution across scopes (shadowing, errors)
- [x] Labels/goto checks (unique, target exists)
- [~] Usual arithmetic conversions (integers)
  - [x] Promotions and integer mixes for key ops
  - [ ] Full matrix across signed/unsigned widths for all operators (arith, compare, shift, ?:)
- [~] Pointers/arrays
  - [x] Pointer arithmetic basics (+/- with int; ptr - ptr -> int surrogate)
  - [ ] Scale by sizeof(element) for all types consistently in backend
  - [ ] Void* compatibility rules; null pointer constants (0, (void*)0)
  - [ ] Pointer comparisons and qualifiers discard diagnostics
- [ ] Incomplete types rules (forward-declared structs/unions; arrays with unspecified size in externs)
- [ ] Composite type rules for repeated declarations & linkage
- [ ] Lvalue/rvalue and modifiable lvalue checks; ++/-- and compound assign rules
- [ ] Qualifiers (const/volatile) rules in assignments/params
- [ ] Constant expression evaluation breadth (for enums, globals, #if)

D. Initializers and Aggregates
- [ ] Brace initializers for arrays/structs/unions (nested)
- [ ] String literal to char array with size inference
- [ ] Zero-initialization semantics
- [ ] Struct/union assignment semantics
- [ ] Aggregate parameter passing/return-by-value checks in sema

E. Backend/Codegen (LLVM IR)
- [x] Direct calls; builtin puts/printf integration
- [ ] Indirect calls via function pointers (bitcast callee as needed)
- [x] Conditional operator lowering (branch-and-join)
- [x] Pointer subtraction lowering (ptrtoint/sub/div size)
- [~] Pointer arithmetic scaling by element size (general)
- [ ] Aggregate handling
  - [ ] Struct/union assignment lowering (memcpy)
  - [ ] By-value parameter passing/return per SysV x86_64 ABI (sret/expansion where needed)
- [ ] Varargs lowering details (default promotions; IR call varargs)
- [ ] Integer casts and ops correctness (sext/zext/trunc; signed/unsigned div/mod; shifts)
- [ ] Floating point types/ops (float/double/long double)
- [ ] Volatile memory ops
- [ ] Alignment and padding correctness in loads/stores

F. Driver/Tooling
- [~] CLI options
  - [ ] -E (pp only), -S (emit IR), -c (object), -o output
  - [ ] -I/-D/-U; -L/-l; pass-through -O flags
  - [ ] Multiple inputs and linking with system toolchain
- [x] Test harness integration (assert_cmd/predicates)
- [ ] Dependency generation (-M/-MF) optional
- [ ] Timeouts/resource limits tunables

G. Testing and Conformance
- [x] Unit tests: lex/parse/sema/backend/driver basic coverage
- [~] Expand matrices
  - [ ] Declarators matrix (ptr/array/func combos, parentheses, abstract)
  - [ ] UAC integer matrix across operators
  - [ ] Pointer conversions (void*, nulls, qualifiers)
  - [ ] Function pointers (sema + backend + runtime)
  - [ ] Aggregates (init/copy/pass/return)
  - [ ] Floats (lexer, sema, backend arithmetic)
  - [ ] Bit-fields (layout/access)
- [ ] Real-world smoke tests (qsort callbacks; small libc-like snippets; string/ctype usage)
- [ ] Fuzzers (optional) for parser and pp

H. CI/Quality/Docs
- [x] CI basic workflow
- [ ] Lints/pedantic profiles; deny warnings in CI (phase-in)
- [ ] Developer docs: architecture, passes, testing guide
- [ ] User docs: CLI, examples, supported C subset and caveats

Execution Checklist – Next Actions
- [ ] Add tests for function pointers end-to-end:
  - Sema: indirect call arity/type mismatch, array-to-pointer decay in pointer calls
  - Backend IR: indirect call emission (bitcast if needed)
  - Driver runtime: call through pointer; switch targets at runtime
- [ ] Parser: implement parenthesized/abstract declarators sufficient for function pointers
- [ ] Backend: implement indirect call lowering
- [ ] Run: cargo test -p parse -p sema -p backend -p wyrmcc until green

[2025-08-30] Function Pointers End-to-End — Completed
- Parser
  - Function-pointer declarators supported across typedef/local/global: `typedef int (*F)(int);`, `int (*fp)(int,int);`.
- Sema
  - Function signatures table (built-ins + TU functions) in place; arity and fixed-arg type checking (incl. variadics) implemented.
  - Indirect calls validated via Expr::CallPtr and also via Expr::Call when the callee resolves to a function type or pointer-to-function.
  - Array-to-pointer decay on arguments used in checks.
- Backend
  - Indirect calls lowered: Expr::CallPtr emits `call i32 %fnptr(... )` using current calling convention (ptr for pointers/format, i32 for ints).
  - Existing direct-call and varargs handling (puts/printf) remain green.
- Tests
  - Backend: `crates/backend/tests/indirect_call.rs` passes.
  - Driver: `crates/driver/tests/run_fn_ptr.rs` passes (switching targets via &add/&sub prints expected results).
  - Full workspace is green (`cargo test -p parse -p sema -p backend -p wyrmcc`).

Checklist delta
- C. Semantics – Function pointers: end-to-end coverage achieved for current subset (Expr::CallPtr typing; designators accepted in calls). Further polish on “designators decay to pointer” and function-type compatibility can be handled during declarator grammar generalization.
- E. Backend – Indirect calls via function pointers: implemented (no bitcasts needed for current simplified i32/ptr convention).

Next Focus
1) Aggregate initializers (minimal)
   - Parser: brace initializers for arrays/structs (flat and simple nested cases).
   - Sema: type-check initializer lists; zero-initialization semantics.
   - Backend: emit constant aggregates for globals; simple stores for locals; zero-init support.
   - Tests: parse + sema unit tests; backend IR for globals; driver runtime for basic aggregate init and access.
2) Declarator grammar breadth
   - Parenthesized declarators beyond fn-ptr basics, abstract declarators (casts, parameter types without names), pointers-to-arrays and arrays-of-pointers; reject arrays of functions.
   - Tests first (parse-focused), then implementation.
3) UAC expansion (integers)
   - Broaden matrices across signed/unsigned mixes for arithmetic, comparisons, shifts, and ?:; add sema tests and a few driver runs.

Execution Checklist — Next Actions (updated)
- [ ] Aggregates: add parser+sema tests for brace initializers; implement; backend emission for zero-inits and simple lists; driver runtime checks.
- [ ] Declarators: add tests for parenthesized/abstract declarators and complex ptr/array combos; extend parser accordingly; keep sema tolerant; adjust as needed.
- [ ] UAC: extend integer conversion tests across operators; align sema/backend behaviors where gaps appear.
- [ ] Keep suites green: `cargo test -p parse -p sema -p backend -p wyrmcc`.